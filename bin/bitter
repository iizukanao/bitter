#!/bin/sh

VERSION=0.1.9

setup () {
  if [ -e engine/setup.sh ]; then
    echo "It appears you already have set up."
    exit 1
  fi

  which_dir="$(dirname $(which $0))"
  link_dir="$(dirname $(test -L "$0" && readlink "$0" || echo "$0"))"
  script_dir=$(cd $which_dir/$link_dir; pwd -P)

  mkdir engine
  cp $script_dir/../setup.sh engine/
  cp $script_dir/../server.js engine/
  cp -R $script_dir/../default engine/
  ln -s $script_dir/../node_modules engine/

  cd engine
  ./setup.sh
}

server () {
  if [ -e engine/server.js ]; then
    node engine/server.js
  else
    echo "Can't find engine/server.js."
    echo "Do this command from the directory you have set up."
    echo "If you have not set up, do \"bitter setup\" first."
    exit 1
  fi
}

gitconfig () {
  if [ ! -e HEAD ]; then
    echo "Do this command in bare .git directory"
    exit 1
  fi

  if [ -e ../notes ]; then
    while true; do
      read -p "../notes exists, do you want to delete it? [y/N]" yn
      case $yn in
        [Yy]* ) break;;
        [Nn]* ) echo "canceled."; exit 1;;
        "" ) echo "canceled."; exit 1;;
        * )  echo "Please answer yes or no.";;
      esac
    done
    rm -rf ../notes
  fi
  mkdir ../notes
  echo "created ../notes for worktree"

  git config core.bare false
  git config core.worktree ../notes
  git config receive.denycurrentbranch ignore

  # Arrange hook for post-receive event
  if [ ! -e hooks/post-receive ]; then
    echo "#!/bin/sh" > hooks/post-receive
  fi
  if ! grep --quiet "# Bitter" hooks/post-receive; then
    cat >> hooks/post-receive <<EOF

# Bitter
git checkout -f
touch ../engine/reindex-needed
EOF
  fi
  chmod +x hooks/post-receive

  git checkout -f

  echo "successfully configured"
}

help () {
  cat <<EOF
usage: bitter <command>
Bitter version $VERSION

Commands are:
   setup      Set up new repository
   server     Start server
   gitconfig  Configure existing bare .git
   version    Show Bitter version
EOF
}

if [ "$1" = "setup" ]; then
  setup
elif [ "$1" = "server" ]; then
  server
elif [ "$1" = "gitconfig" ]; then
  gitconfig
elif [ "$1" = "version" ]; then
  echo "$VERSION"
elif [ "$1" = "help" ]; then
  help
else
  help
  exit 1
fi
