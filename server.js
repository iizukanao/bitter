// Generated by CoffeeScript 1.6.3
(function() {
  var BitterServer, ejs, events, express, fs, http, marked, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  http = require('http');

  events = require('events');

  ejs = require('ejs');

  marked = require('marked');

  express = require('express');

  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: true,
    pedantic: false,
    sanitize: false,
    smartLists: true,
    langPrefix: 'lang-'
  });

  BitterServer = (function(_super) {
    __extends(BitterServer, _super);

    function BitterServer(opts) {
      var err, _ref, _ref1, _ref2,
        _this = this;
      this.constructorOpts = opts;
      this.basedir = (_ref = opts != null ? opts.basedir : void 0) != null ? _ref : path.normalize("" + (process.cwd()) + "/notes");
      this.port = (_ref1 = (_ref2 = opts != null ? opts.port : void 0) != null ? _ref2 : process.env.PORT) != null ? _ref1 : 1341;
      this.configFilename = "" + this.basedir + "/config/config.json";
      this.pageTemplateFilename = "" + this.basedir + "/config/page.ejs";
      this.reindexCheckFilename = "" + this.basedir + "/reindex-needed";
      this.config = null;
      this.recentInfo = {};
      this.pageTemplate = null;
      if (!fs.existsSync(this.configFilename)) {
        console.log("Error: " + this.configFilename + " does not exist");
        process.exit(1);
      }
      err = this.loadConfig();
      if (err != null) {
        process.exit(1);
      }
      this.app = express();
      this.httpServer = http.createServer(this.app);
      this.app.use(express.compress());
      this.app.use(express.responseTime());
      this.app.use(express["static"]("" + this.basedir + "/public"));
      this.app.get(/^\/(\d{4})\/(\d{2})\/(\d+)(-\d+)?\/(.*)$/, function(req, res, next) {
        var date, datepart, filepath, month, part, slug, year, _ref3;
        year = req.params[0];
        month = req.params[1];
        date = req.params[2];
        part = (_ref3 = req.params[3]) != null ? _ref3 : '';
        slug = req.params[4];
        datepart = date + part;
        filepath = "" + _this.basedir + "/" + year + "/" + month + "/" + datepart + "-" + slug + ".md";
        return fs.exists(filepath, function(exists) {
          var staticPath;
          if (!exists) {
            staticPath = "" + _this.basedir + "/" + year + "/" + month + "/" + slug;
            fs.stat(staticPath, function(err, stats) {
              if (err) {
                return _this.respondWithNotFound(res);
              } else if (stats.isDirectory()) {
                return next();
              } else {
                return res.sendfile(staticPath);
              }
            });
            return;
          }
          return fs.readFile(filepath, {
            encoding: 'utf8'
          }, function(err, markdown) {
            if (err) {
              _this.logMessage(err);
              _this.respondWithServerError(res);
              return;
            }
            return _this.formatPage({
              markdown: markdown,
              link: "/" + year + "/" + month + "/" + datepart + "/" + slug,
              year: year,
              month: month,
              date: date
            }, function(err, html) {
              if (err) {
                _this.logMessage(err);
                _this.respondWithServerError(res);
                return;
              }
              res.setHeader('Content-Type', 'text/html; charset=utf-8');
              return res.send(html);
            });
          });
        });
      });
      this.app.get(/^\/(\d{4})\/(\d{2})\/[\d-]+\/?/, function(req, res) {
        var month, year;
        year = req.params[0];
        month = req.params[1];
        return res.redirect("/" + year + "/" + month + "/");
      });
      this.app.get('/archives', function(req, res) {
        var markdown, year, years, _i, _len;
        years = _this.listYears();
        markdown = "## Archives\n";
        for (_i = 0, _len = years.length; _i < _len; _i++) {
          year = years[_i];
          markdown += "[" + year + "](/" + year + "/)\n";
        }
        return _this.formatPage({
          markdown: markdown,
          noTitleLink: true,
          noAuthor: true
        }, function(err, html) {
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          res.setHeader('Content-Type', 'text/html; charset=utf-8');
          return res.send(html);
        });
      });
      this.app.get(/^\/(\d{4})\/?$/, function(req, res) {
        var markdown, month, months, year, _i, _len;
        year = req.params[0];
        months = _this.listMonths(year);
        markdown = "## Archives for " + year + "\n";
        for (_i = 0, _len = months.length; _i < _len; _i++) {
          month = months[_i];
          markdown += "[" + year + "-" + month + "](/" + year + "/" + month + "/)\n";
        }
        return _this.formatPage({
          markdown: markdown,
          noTitleLink: true,
          noAuthor: true
        }, function(err, html) {
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          res.setHeader('Content-Type', 'text/html; charset=utf-8');
          return res.send(html);
        });
      });
      this.app.get(/^\/(\d{4})\/(\d{2})\/?$/, function(req, res) {
        var content, date, datepart, file, filepath, files, lex, markdown, match, month, part, slug, title, year, _i, _len, _ref3, _ref4;
        year = req.params[0];
        month = req.params[1];
        files = _this.listEntries(year, month);
        markdown = "## Archives for [" + year + "](/" + year + "/)-" + month + "\n";
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          match = /^(\d+)(-\d+)?-(.*)\.md$/.exec(file);
          date = match[1];
          part = (_ref3 = match[2]) != null ? _ref3 : '';
          slug = match[3];
          datepart = date + part;
          filepath = "" + _this.basedir + "/" + year + "/" + month + "/" + file;
          content = fs.readFileSync(filepath, {
            encoding: 'utf8'
          });
          lex = marked.Lexer.lex(content);
          title = (_ref4 = _this.findTitleFromLex(lex)) != null ? _ref4 : '';
          markdown += ("" + (_this.formatDate(year, month, date)) + " ") + ("[" + (title || '(untitled)') + "](/" + year + "/" + month + "/" + datepart + "/" + slug + ")\n");
        }
        return _this.formatPage({
          markdown: markdown,
          title: "Archives for " + year + "-" + month,
          noTitleLink: true,
          noAuthor: true
        }, function(err, html) {
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          res.setHeader('Content-Type', 'text/html; charset=utf-8');
          return res.send(html);
        });
      });
      this.app.get('/recents', function(req, res) {
        var entryUrl, file, markdown, ymd, _i, _len, _ref3;
        markdown = "## Recent Entries\n";
        _ref3 = _this.recentInfo.recentFiles;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          file = _ref3[_i];
          entryUrl = "/" + file.year + "/" + file.month + "/" + file.datepart + "/" + file.slug;
          ymd = _this.formatDate(file.year, file.month, file.date);
          markdown += "" + ymd + " [" + (file.title || '(untitled)') + "](" + entryUrl + ")\n";
        }
        markdown += "\n\n[Archives](/archives)";
        return _this.formatPage({
          markdown: markdown,
          noTitleLink: true,
          noAuthor: true
        }, function(err, html) {
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          res.setHeader('Content-Type', 'text/html; charset=utf-8');
          return res.send(html);
        });
      });
      this.app.get('/index.atom', function(req, res) {
        var buf, entryUrl, file, html, title, _i, _len, _ref3;
        buf = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>" + _this.config.siteName + "</title>\n<link href=\"" + _this.config.siteURL + "/index.atom\" rel=\"self\" />\n<link href=\"" + _this.config.siteURL + "\" />\n<id>" + (_this.escapeTags(_this.config.siteURL + '/')) + "</id>\n<updated>" + (new Date(_this.recentInfo.generatedTime).toISOString()) + "</updated>";
        _ref3 = _this.recentInfo.recentFiles;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          file = _ref3[_i];
          html = _this.convertToAbsoluteLinks(file.body, {
            year: file.year,
            month: file.month,
            date: file.date,
            absoluteURL: true
          });
          entryUrl = "" + _this.config.siteURL + "/" + file.year + "/" + file.month + "/" + file.datepart + "/" + file.slug;
          title = file.title;
          if ((title == null) || (title === '')) {
            title = '(untitled)';
          }
          buf += "<entry>\n  <title>" + (_this.escapeTags(title)) + "</title>\n  <link href=\"" + entryUrl + "\" />\n  <id>" + entryUrl + "</id>\n  <updated>" + (new Date(file.time).toISOString()) + "</updated>\n  <content type=\"html\">" + (_this.escapeTags(html)) + "</content>\n  <author>\n    <name>" + (_this.escapeTags(_this.config.authorName)) + "</name>\n    <uri>" + (_this.escapeTags(_this.config.authorLink)) + "</uri>\n";
          if (_this.config.authorEmail) {
            buf += "    <email>" + _this.config.authorEmail + "</email>";
          }
          buf += "\n  </author>\n</entry>";
        }
        buf += "\n</feed>\n";
        res.setHeader('Content-Type', 'text/xml; charset=utf-8');
        return res.send(buf);
      });
      this.app.get('/', function(req, res) {
        var file, filepath;
        file = _this.recentInfo.recentFiles[0];
        if (file == null) {
          res.setHeader('Content-Type', 'text/plain; charset=utf-8');
          res.send("This is the place where your content will appear.\n\nAdd a first entry like this:\n\nmkdir -p 2013/05\necho \"# Test\\n\\nHello World\" > 2013/05/27-test.md\ngit add .\ngit commit -m \"add test entry\"\ngit push origin master\n\nFinished? Then reload this page slowly.");
          return;
        }
        filepath = "" + _this.basedir + "/" + file.year + "/" + file.month + "/" + file.datepart + "-" + file.slug + ".md";
        return fs.readFile(filepath, {
          encoding: 'utf8'
        }, function(err, markdown) {
          var url;
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          url = "/" + file.year + "/" + file.month + "/" + file.datepart + "/" + file.slug;
          return _this.formatPage({
            markdown: markdown,
            link: url,
            year: file.year,
            month: file.month,
            date: file.date,
            noTitle: true,
            absolutePath: true
          }, function(err, html) {
            if (err) {
              _this.logMessage(err);
              _this.respondWithServerError(res);
              return;
            }
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
            return res.send(html);
          });
        });
      });
      this.app.get('*', function(req, res) {
        return _this.respondWithNotFound(res);
      });
      this.app.use(function(err, req, res, next) {
        console.error(err.stack);
        return next(err);
      });
      if (opts != null ? opts.autoStart : void 0) {
        this.start();
      }
    }

    BitterServer.prototype.start = function(callback) {
      var _this = this;
      if (fs.existsSync(this.reindexCheckFilename)) {
        fs.unlink(this.reindexCheckFilename);
      }
      fs.watchFile(this.reindexCheckFilename, function(curr, prev) {
        if (curr.nlink > 0) {
          return fs.unlink(_this.reindexCheckFilename, function() {
            _this.createIndex();
            return _this.emit('updateIndex');
          });
        }
      });
      fs.watchFile(this.configFilename, function(curr, prev) {
        var err;
        err = _this.loadConfig();
        if (err == null) {
          return _this.logMessage("loaded " + (path.basename(_this.configFilename)));
        }
      });
      this.pageTemplate = fs.readFileSync(this.pageTemplateFilename, {
        encoding: 'utf8'
      });
      fs.watchFile(this.pageTemplateFilename, function(curr, prev) {
        return fs.readFile(_this.pageTemplateFilename, {
          encoding: 'utf8'
        }, function(err, data) {
          if (err) {
            _this.logMessage("" + _this.pageTemplateFilename + " read error: " + err);
            return;
          }
          _this.pageTemplate = data;
          return _this.logMessage("loaded " + (path.basename(_this.pageTemplateFilename)));
        });
      });
      this.createIndex();
      this.httpServer.listen(this.port);
      return this.httpServer.on('listening', function() {
        return _this.logMessage("Server started on port " + (_this.httpServer.address().port));
      });
    };

    BitterServer.prototype.stop = function() {
      var _this = this;
      fs.unwatchFile(this.reindexCheckFilename);
      fs.unwatchFile(this.configFilename);
      fs.unwatchFile(this.pageTemplateFilename);
      return this.httpServer.close(function() {
        return _this.logMessage("Server closed");
      });
    };

    BitterServer.prototype.logMessage = function(str, opts) {
      var buf, d, _ref;
      if ((_ref = this.constructorOpts) != null ? _ref.quiet : void 0) {
        return;
      }
      buf = '';
      if (!(opts != null ? opts.noTime : void 0)) {
        d = new Date;
        buf += "[" + (d.toDateString()) + " " + (d.toLocaleTimeString()) + "] ";
      }
      buf += str;
      if (!(opts != null ? opts.noNewline : void 0)) {
        buf += "\n";
      }
      return process.stdout.write(buf);
    };

    BitterServer.prototype.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    BitterServer.prototype.formatDate = function(year, month, date) {
      return "" + this.monthNames[month - 1] + " " + (parseInt(date)) + ", " + year;
    };

    BitterServer.prototype.obfuscateEmail = function(str) {
      var buf, i, _i, _ref;
      buf = '';
      for (i = _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        buf += "&#" + (str.charCodeAt(i)) + ";";
      }
      return buf;
    };

    BitterServer.prototype.escapeTags = function(str) {
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    };

    BitterServer.prototype.loadConfig = function() {
      var e;
      try {
        this.config = JSON.parse(fs.readFileSync(this.configFilename));
      } catch (_error) {
        e = _error;
        this.logMessage("" + this.configFilename + " read error: " + e);
        return e;
      }
      this.config.siteURL = this.config.siteURL.replace(/\/$/, '');
      this.config.authorEmail = this.obfuscateEmail(this.config.authorEmail);
      return null;
    };

    BitterServer.prototype.respondWithServerError = function(res) {
      var markdown,
        _this = this;
      markdown = "## Server Error\n\nPlease try again later.\n";
      return this.formatPage({
        markdown: markdown,
        noTitleLink: true,
        noAuthor: true
      }, function(err, html) {
        if (err) {
          _this.logMessage(err);
          res.send(500, 'Server error');
          return;
        }
        res.setHeader('Content-Type', 'text/html; charset=utf-8');
        return res.send(500, html);
      });
    };

    BitterServer.prototype.respondWithNotFound = function(res) {
      var markdown,
        _this = this;
      markdown = "## Not Found\n\nThe requested document was not found.\n";
      return this.formatPage({
        markdown: markdown,
        noTitleLink: true,
        noAuthor: true
      }, function(err, html) {
        if (err) {
          _this.logMessage(err);
          _this.respondWithServerError(res);
          return;
        }
        res.setHeader('Content-Type', 'text/html; charset=utf-8');
        return res.send(404, html);
      });
    };

    BitterServer.prototype.findTitleFromLex = function(lex) {
      var component, _i, _len;
      for (_i = 0, _len = lex.length; _i < _len; _i++) {
        component = lex[_i];
        if (component.type === 'heading') {
          return component.text;
        }
      }
      return null;
    };

    BitterServer.prototype.convertToAbsoluteLinks = function(html, params) {
      var _this = this;
      html = html.replace(/(<a href|<img src)="(.*?)"/g, function(match, p1, p2) {
        p2 = p2.replace(/^\.\.\/(?!\.\.)/g, "/" + params.year + "/" + params.month + "/");
        p2 = p2.replace(/^\.\.\/\.\.\/(?!\.\.)/g, "/" + params.year + "/");
        p2 = p2.replace(/^\.\.\/\.\.\/\.\.\/(?!\.\.)/g, "/");
        if (p2.indexOf('://') === -1) {
          if (p2[0] !== '/') {
            p2 = "/" + params.year + "/" + params.month + "/" + params.date + "/" + p2;
          }
          if (params.absoluteURL) {
            p2 = "" + _this.config.siteURL + p2;
          }
        }
        return "" + p1 + "=\"" + p2 + "\"";
      });
      return html;
    };

    BitterServer.prototype.formatPage = function(input, callback) {
      var author, body, buf, headingCount, html, lex, lexTitle, opts, title, _ref;
      lex = marked.Lexer.lex(input.markdown);
      title = (_ref = input.title) != null ? _ref : null;
      if (title == null) {
        lexTitle = this.findTitleFromLex(lex);
        if (lexTitle != null) {
          title = lexTitle;
        }
      }
      if (title == null) {
        title = '(untitled)';
      }
      body = marked.Parser.parse(lex);
      if (input.absolutePath || input.absoluteURL) {
        body = this.convertToAbsoluteLinks(body, input);
      }
      if ((input.year != null) && (input.month != null) && (input.date != null)) {
        buf = "<div class=\"date\">";
        if (!input.noTitleLink) {
          buf += "<a href=\"" + input.link + "\">";
        }
        buf += "" + (this.formatDate(input.year, input.month, input.date));
        if (!input.noTitleLink) {
          buf += "</a>";
        }
        buf += "</div>\n";
        body = buf + body;
      }
      author = void 0;
      if (!input.noAuthor) {
        author = "<div class=\"author\">Posted by " + ("<a href=\"" + this.config.authorLink + "\">" + this.config.authorName + "</a>");
        if (this.config.authorEmail) {
          author += (" &lt;<a href=\"mailto:" + this.config.authorEmail + "\">") + ("" + this.config.authorEmail + "</a>&gt;");
        }
        author += "</div>";
      }
      if (!input.noTitleLink) {
        body = body.replace(/<(h\d)>(.*?)<\/\1>/, "<$1><a href=\"" + input.link + "\">$2</a></$1>");
      }
      if (input.anchorHeading !== false) {
        headingCount = -1;
        body = body.replace(/<(h\d)>(.*?)<\/\1>/g, function(match, p1, p2) {
          if (++headingCount > 0) {
            return ("<" + p1 + " class=\"anchor\" id=\"heading_" + headingCount + "\">") + ("<a href=\"#heading_" + headingCount + "\">" + p2 + "</a></" + p1 + ">");
          } else {
            return match;
          }
        });
      }
      body = body.replace(/<(h\d)>/, "<$1 class=\"title\">");
      opts = {
        title: title,
        body: body,
        author: author,
        siteName: this.config.siteName,
        siteURL: this.config.siteURL
      };
      if (input.noTitle) {
        opts.title = void 0;
      }
      html = ejs.render(this.pageTemplate, opts);
      return callback(null, html);
    };

    BitterServer.prototype.listYears = function() {
      var year, years;
      years = fs.readdirSync(this.basedir);
      years = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = years.length; _i < _len; _i++) {
          year = years[_i];
          if (/\d{4}/.test(year)) {
            _results.push(year);
          }
        }
        return _results;
      })();
      years.sort(function(a, b) {
        return b - a;
      });
      return years;
    };

    BitterServer.prototype.listMonths = function(year) {
      var month, months;
      months = fs.readdirSync("" + this.basedir + "/" + year);
      months = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = months.length; _i < _len; _i++) {
          month = months[_i];
          if (/\d{2}/.test(month)) {
            _results.push(month);
          }
        }
        return _results;
      })();
      months.sort(function(a, b) {
        return b - a;
      });
      return months;
    };

    BitterServer.prototype.listEntries = function(year, month) {
      var file, files;
      files = fs.readdirSync("" + this.basedir + "/" + year + "/" + month);
      files = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (/\.md$/.test(file)) {
            _results.push(file);
          }
        }
        return _results;
      })();
      files.sort(function(a, b) {
        var cmp, intA, intB, match, subintA, subintB;
        intA = parseInt(a);
        intB = parseInt(b);
        cmp = intB - intA;
        if (cmp === 0) {
          subintA = 0;
          subintB = 0;
          if ((match = /^\d+-(\d+)-/.exec(a)) != null) {
            subintA = parseInt(match[1]);
          }
          if ((match = /^\d+-(\d+)-/.exec(b)) != null) {
            subintB = parseInt(match[1]);
          }
          cmp = subintB - subintA;
        }
        if (cmp === 0) {
          cmp = b.localeCompare(a);
        }
        return cmp;
      });
      return files;
    };

    BitterServer.prototype.createIndex = function(numRecents) {
      var body, count, date, elapsedTime, file, filepath, files, lex, markdown, match, month, months, part, recentFiles, slug, startTime, title, year, years, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      if (numRecents == null) {
        numRecents = 15;
      }
      this.logMessage("indexing...", {
        noNewline: true
      });
      startTime = new Date().getTime();
      count = 0;
      recentFiles = [];
      years = this.listYears();
      for (_i = 0, _len = years.length; _i < _len; _i++) {
        year = years[_i];
        if (count >= numRecents) {
          break;
        }
        months = this.listMonths(year);
        for (_j = 0, _len1 = months.length; _j < _len1; _j++) {
          month = months[_j];
          if (count >= numRecents) {
            break;
          }
          files = this.listEntries(year, month);
          for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
            file = files[_k];
            match = /^(\d+)(-\d+)?-(.*)\.md$/.exec(file);
            if (match == null) {
              continue;
            }
            filepath = "" + this.basedir + "/" + year + "/" + month + "/" + file;
            markdown = fs.readFileSync(filepath, {
              encoding: 'utf8'
            });
            lex = marked.Lexer.lex(markdown);
            title = (_ref = this.findTitleFromLex(lex)) != null ? _ref : '';
            body = marked.Parser.parse(lex);
            date = match[1];
            part = (_ref1 = match[2]) != null ? _ref1 : '';
            slug = match[3];
            recentFiles.push({
              time: new Date("" + year + "-" + month + "-" + date + " 00:00:00").getTime(),
              title: title,
              body: body,
              year: year,
              month: month,
              date: date,
              part: part,
              datepart: date + part,
              slug: slug
            });
            if (++count >= numRecents) {
              break;
            }
          }
        }
      }
      this.recentInfo = {
        recentFiles: recentFiles,
        generatedTime: new Date().getTime()
      };
      elapsedTime = new Date().getTime() - startTime;
      return this.logMessage("done (" + elapsedTime + " ms)", {
        noTime: true
      });
    };

    return BitterServer;

  })(events.EventEmitter);

  module.exports = BitterServer;

  if (module.parent == null) {
    new BitterServer({
      autoStart: true
    });
  }

}).call(this);
