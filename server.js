// Generated by CoffeeScript 1.12.7
(function() {
  var BitterServer, compression, ejs, events, express, fs, http, marked, path, responseTime,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fs = require('fs');

  path = require('path');

  http = require('http');

  events = require('events');

  ejs = require('ejs');

  marked = require('marked');

  compression = require('compression');

  responseTime = require('response-time');

  express = require('express');

  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: true,
    pedantic: false,
    sanitize: false,
    smartLists: true,
    langPrefix: 'lang-'
  });

  BitterServer = (function(superClass) {
    extend(BitterServer, superClass);

    function BitterServer(opts) {
      var err, ref, ref1, ref2, ref3;
      this.constructorOpts = opts;
      this.basedir = (ref = opts != null ? opts.basedir : void 0) != null ? ref : path.normalize((process.cwd()) + "/notes");
      this.port = (ref1 = (ref2 = opts != null ? opts.port : void 0) != null ? ref2 : process.env.PORT) != null ? ref1 : 1341;
      this.configFilename = (ref3 = opts != null ? opts.configFilename : void 0) != null ? ref3 : this.basedir + "/config/config.json";
      this.pageTemplateFilename = this.basedir + "/config/page.ejs";
      this.reindexCheckFilename = this.basedir + "/reindex-needed";
      this.config = null;
      this.recentInfo = {};
      this.pageTemplate = null;
      if (!fs.existsSync(this.configFilename)) {
        console.log("Error: " + this.configFilename + " does not exist");
        process.exit(1);
      }
      err = this.loadConfig();
      if (err != null) {
        process.exit(1);
      }
      this.app = express();
      this.httpServer = http.createServer(this.app);
      this.app.use(compression());
      this.app.use(responseTime());
      this.app.use(express["static"](this.basedir + "/public"));
      this.app.get(/^\/(\d{4})\/(\d{2})\/(\d+)(-\d+)?\/(.*)$/, (function(_this) {
        return function(req, res, next) {
          var date, datepart, filepath, month, part, ref4, slug, year;
          year = req.params[0];
          month = req.params[1];
          date = req.params[2];
          part = (ref4 = req.params[3]) != null ? ref4 : '';
          slug = req.params[4];
          datepart = date + part;
          filepath = _this.basedir + "/" + year + "/" + month + "/" + datepart + "-" + slug + ".md";
          return fs.exists(filepath, function(exists) {
            var staticPath;
            if (!exists) {
              staticPath = _this.basedir + "/" + year + "/" + month + "/" + slug;
              fs.stat(staticPath, function(err, stats) {
                if (err) {
                  return _this.respondWithNotFound(res);
                } else if (stats.isDirectory()) {
                  return next();
                } else {
                  return res.sendFile(staticPath);
                }
              });
              return;
            }
            return fs.readFile(filepath, {
              encoding: 'utf8'
            }, function(err, markdown) {
              if (err) {
                _this.logMessage(err);
                _this.respondWithServerError(res);
                return;
              }
              return _this.formatPage({
                markdown: markdown,
                link: "/" + year + "/" + month + "/" + datepart + "/" + slug,
                year: year,
                month: month,
                date: date
              }, function(err, html) {
                if (err) {
                  _this.logMessage(err);
                  _this.respondWithServerError(res);
                  return;
                }
                res.set('Content-Type', 'text/html; charset=utf-8');
                return res.send(html);
              });
            });
          });
        };
      })(this));
      this.app.get(/^\/(\d{4})\/(\d{2})\/[\d-]+\/?/, function(req, res) {
        var month, year;
        year = req.params[0];
        month = req.params[1];
        return res.redirect("/" + year + "/" + month + "/");
      });
      this.app.get('/archives', (function(_this) {
        return function(req, res) {
          var j, len, markdown, year, years;
          years = _this.listYears();
          markdown = "## Archives\n";
          for (j = 0, len = years.length; j < len; j++) {
            year = years[j];
            markdown += "[" + year + "](/" + year + "/)\n";
          }
          return _this.formatPage({
            markdown: markdown,
            noTitleLink: true,
            noAuthor: true
          }, function(err, html) {
            if (err) {
              _this.logMessage(err);
              _this.respondWithServerError(res);
              return;
            }
            res.set('Content-Type', 'text/html; charset=utf-8');
            return res.send(html);
          });
        };
      })(this));
      this.app.get(/^\/(\d{4})\/?$/, (function(_this) {
        return function(req, res) {
          var e, j, len, markdown, month, months, year;
          year = req.params[0];
          try {
            months = _this.listMonths(year);
          } catch (error) {
            e = error;
            _this.respondWithNotFound(res);
            return;
          }
          markdown = "## Archives for " + year + "\n";
          for (j = 0, len = months.length; j < len; j++) {
            month = months[j];
            markdown += "[" + year + "-" + month + "](/" + year + "/" + month + "/)\n";
          }
          return _this.formatPage({
            markdown: markdown,
            noTitleLink: true,
            noAuthor: true
          }, function(err, html) {
            if (err) {
              _this.logMessage(err);
              _this.respondWithServerError(res);
              return;
            }
            res.set('Content-Type', 'text/html; charset=utf-8');
            return res.send(html);
          });
        };
      })(this));
      this.app.get(/^\/(\d{4})\/(\d{2})\/?$/, (function(_this) {
        return function(req, res) {
          var content, date, datepart, e, file, filepath, files, j, len, lex, markdown, match, month, part, ref4, ref5, slug, title, year;
          year = req.params[0];
          month = req.params[1];
          try {
            files = _this.listEntries(year, month);
          } catch (error) {
            e = error;
            _this.respondWithNotFound(res);
            return;
          }
          markdown = "## Archives for [" + year + "](/" + year + "/)-" + month + "\n";
          for (j = 0, len = files.length; j < len; j++) {
            file = files[j];
            match = /^(\d+)(-\d+)?-(.*)\.md$/.exec(file);
            date = match[1];
            part = (ref4 = match[2]) != null ? ref4 : '';
            slug = match[3];
            datepart = date + part;
            filepath = _this.basedir + "/" + year + "/" + month + "/" + file;
            content = fs.readFileSync(filepath, {
              encoding: 'utf8'
            });
            lex = marked.Lexer.lex(content);
            title = (ref5 = _this.findTitleFromLex(lex)) != null ? ref5 : '';
            markdown += ((_this.formatDate(year, month, date)) + " ") + ("[" + (title || '(untitled)') + "](/" + year + "/" + month + "/" + datepart + "/" + slug + ")\n");
          }
          return _this.formatPage({
            markdown: markdown,
            title: "Archives for " + year + "-" + month,
            noTitleLink: true,
            noAuthor: true
          }, function(err, html) {
            if (err) {
              _this.logMessage(err);
              _this.respondWithServerError(res);
              return;
            }
            res.set('Content-Type', 'text/html; charset=utf-8');
            return res.send(html);
          });
        };
      })(this));
      this.app.get('/recents', (function(_this) {
        return function(req, res) {
          var entryUrl, file, j, len, markdown, numRecents, ref4, ref5, ymd;
          numRecents = (ref4 = _this.config.numRecents) != null ? ref4 : _this.recentInfo.recentFiles.length;
          markdown = "## Recent Entries\n";
          ref5 = _this.recentInfo.recentFiles.slice(0, numRecents);
          for (j = 0, len = ref5.length; j < len; j++) {
            file = ref5[j];
            entryUrl = "/" + file.year + "/" + file.month + "/" + file.datepart + "/" + file.slug;
            ymd = _this.formatDate(file.year, file.month, file.date);
            markdown += ymd + " [" + (file.title || '(untitled)') + "](" + entryUrl + ")\n";
          }
          markdown += "\n\n[Archives](/archives)";
          return _this.formatPage({
            markdown: markdown,
            noTitleLink: true,
            noAuthor: true
          }, function(err, html) {
            if (err) {
              _this.logMessage(err);
              _this.respondWithServerError(res);
              return;
            }
            res.set('Content-Type', 'text/html; charset=utf-8');
            return res.send(html);
          });
        };
      })(this));
      this.app.get('/index.atom', (function(_this) {
        return function(req, res) {
          var buf, entryUrl, file, html, j, len, numRecents, ref4, ref5, title;
          buf = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n<title>" + _this.config.siteName + "</title>\n<link href=\"" + _this.config.siteURL + "/index.atom\" rel=\"self\" />\n<link href=\"" + _this.config.siteURL + "\" />\n<id>" + (_this.escapeTags(_this.config.siteURL + '/')) + "</id>\n<updated>" + (new Date(_this.recentInfo.generatedTime).toISOString()) + "</updated>";
          numRecents = (ref4 = _this.config.numRecents) != null ? ref4 : _this.recentInfo.recentFiles.length;
          ref5 = _this.recentInfo.recentFiles.slice(0, numRecents);
          for (j = 0, len = ref5.length; j < len; j++) {
            file = ref5[j];
            html = _this.convertToAbsoluteLinks(file.body, {
              year: file.year,
              month: file.month,
              date: file.date,
              absoluteURL: true
            });
            entryUrl = _this.config.siteURL + "/" + file.year + "/" + file.month + "/" + file.datepart + "/" + file.slug;
            title = file.title;
            if ((title == null) || (title === '')) {
              title = '(untitled)';
            }
            buf += "<entry>\n  <title>" + (_this.escapeTags(title)) + "</title>\n  <link href=\"" + entryUrl + "\" />\n  <id>" + entryUrl + "</id>\n  <updated>" + (new Date(file.time).toISOString()) + "</updated>\n  <content type=\"html\">" + (_this.escapeTags(html)) + "</content>\n  <author>\n    <name>" + (_this.escapeTags(_this.config.authorName)) + "</name>\n    <uri>" + (_this.escapeTags(_this.config.authorLink)) + "</uri>\n";
            if (_this.config.authorEmail) {
              buf += "    <email>" + _this.config.authorEmail + "</email>";
            }
            buf += "\n  </author>\n</entry>";
          }
          buf += "\n</feed>\n";
          res.set('Content-Type', 'text/xml; charset=utf-8');
          return res.send(buf);
        };
      })(this));
      this.app.get('/', (function(_this) {
        return function(req, res) {
          if (_this.config.homepage === 'recents') {
            return _this.serveRecents(req, res);
          } else {
            return _this.serveMostRecentEntry(req, res);
          }
        };
      })(this));
      this.app.get('*', (function(_this) {
        return function(req, res) {
          return _this.respondWithNotFound(res);
        };
      })(this));
      this.app.use(function(err, req, res, next) {
        console.error(err.stack);
        return next(err);
      });
      if (opts != null ? opts.autoStart : void 0) {
        this.start();
      }
    }

    BitterServer.prototype.start = function(callback) {
      if (fs.existsSync(this.reindexCheckFilename)) {
        fs.unlink(this.reindexCheckFilename);
      }
      fs.watchFile(this.reindexCheckFilename, (function(_this) {
        return function(curr, prev) {
          if (curr.nlink > 0) {
            return fs.unlink(_this.reindexCheckFilename, function() {
              _this.createIndex();
              return _this.emit('updateIndex');
            });
          }
        };
      })(this));
      fs.watchFile(this.configFilename, (function(_this) {
        return function(curr, prev) {
          var err;
          err = _this.loadConfig();
          if (err == null) {
            _this.logMessage("loaded " + (path.basename(_this.configFilename)));
            return _this.createIndex();
          }
        };
      })(this));
      this.pageTemplate = fs.readFileSync(this.pageTemplateFilename, {
        encoding: 'utf8'
      });
      fs.watchFile(this.pageTemplateFilename, (function(_this) {
        return function(curr, prev) {
          return fs.readFile(_this.pageTemplateFilename, {
            encoding: 'utf8'
          }, function(err, data) {
            if (err) {
              _this.logMessage(_this.pageTemplateFilename + " read error: " + err);
              return;
            }
            _this.pageTemplate = data;
            return _this.logMessage("loaded " + (path.basename(_this.pageTemplateFilename)));
          });
        };
      })(this));
      this.createIndex();
      this.httpServer.listen(this.port);
      return this.httpServer.on('listening', (function(_this) {
        return function() {
          return _this.logMessage("Server started on port " + (_this.httpServer.address().port));
        };
      })(this));
    };

    BitterServer.prototype.stop = function() {
      fs.unwatchFile(this.reindexCheckFilename);
      fs.unwatchFile(this.configFilename);
      fs.unwatchFile(this.pageTemplateFilename);
      return this.httpServer.close((function(_this) {
        return function() {
          return _this.logMessage("Server closed");
        };
      })(this));
    };

    BitterServer.prototype.logMessage = function(str, opts) {
      var buf, d, ref;
      if ((ref = this.constructorOpts) != null ? ref.quiet : void 0) {
        return;
      }
      buf = '';
      if (!(opts != null ? opts.noTime : void 0)) {
        d = new Date;
        buf += "[" + (d.toDateString()) + " " + (d.toLocaleTimeString()) + "] ";
      }
      buf += str;
      if (!(opts != null ? opts.noNewline : void 0)) {
        buf += "\n";
      }
      return process.stdout.write(buf);
    };

    BitterServer.prototype.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    BitterServer.prototype.formatDate = function(year, month, date) {
      return this.monthNames[month - 1] + " " + (parseInt(date)) + ", " + year;
    };

    BitterServer.prototype.obfuscateEmail = function(str) {
      var buf, i, j, ref;
      buf = '';
      for (i = j = 0, ref = str.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        buf += "&#" + (str.charCodeAt(i)) + ";";
      }
      return buf;
    };

    BitterServer.prototype.escapeTags = function(str) {
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    };

    BitterServer.prototype.loadConfig = function() {
      var e;
      try {
        this.config = JSON.parse(fs.readFileSync(this.configFilename));
      } catch (error) {
        e = error;
        this.logMessage(this.configFilename + " read error: " + e);
        return e;
      }
      this.config.siteURL = this.config.siteURL.replace(/\/$/, '');
      this.config.authorEmail = this.obfuscateEmail(this.config.authorEmail);
      return null;
    };

    BitterServer.prototype.respondWithServerError = function(res) {
      var markdown;
      markdown = "## Server Error\n\nPlease try again later.\n";
      return this.formatPage({
        markdown: markdown,
        noTitleLink: true,
        noAuthor: true
      }, (function(_this) {
        return function(err, html) {
          if (err) {
            _this.logMessage(err);
            res.status(500).send('Server error');
            return;
          }
          res.set('Content-Type', 'text/html; charset=utf-8');
          return res.status(500).send(html);
        };
      })(this));
    };

    BitterServer.prototype.respondWithNotFound = function(res) {
      var markdown;
      markdown = "## Not Found\n\nThe requested document was not found.\n";
      return this.formatPage({
        markdown: markdown,
        noTitleLink: true,
        noAuthor: true
      }, (function(_this) {
        return function(err, html) {
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          res.set('Content-Type', 'text/html; charset=utf-8');
          return res.status(404).send(html);
        };
      })(this));
    };

    BitterServer.prototype.findTitleFromLex = function(lex) {
      var component, j, len;
      for (j = 0, len = lex.length; j < len; j++) {
        component = lex[j];
        if (component.type === 'heading') {
          return component.text;
        }
      }
      return null;
    };

    BitterServer.prototype.convertToAbsoluteLinks = function(html, params) {
      html = html.replace(/(<a href|<img src)="(.*?)"/g, (function(_this) {
        return function(match, p1, p2) {
          p2 = p2.replace(/^\.\.\/(?!\.\.)/g, "/" + params.year + "/" + params.month + "/");
          p2 = p2.replace(/^\.\.\/\.\.\/(?!\.\.)/g, "/" + params.year + "/");
          p2 = p2.replace(/^\.\.\/\.\.\/\.\.\/(?!\.\.)/g, "/");
          if (p2.indexOf('://') === -1) {
            if (p2[0] !== '/') {
              p2 = "/" + params.year + "/" + params.month + "/" + params.date + "/" + p2;
            }
            if (params.absoluteURL) {
              p2 = "" + _this.config.siteURL + p2;
            }
          }
          return p1 + "=\"" + p2 + "\"";
        };
      })(this));
      return html;
    };

    BitterServer.prototype.formatPage = function(input, callback) {
      var author, body, buf, headingCount, html, lex, lexTitle, opts, ref, title;
      lex = marked.Lexer.lex(input.markdown);
      title = (ref = input.title) != null ? ref : null;
      if (title == null) {
        lexTitle = this.findTitleFromLex(lex);
        if (lexTitle != null) {
          title = lexTitle;
        }
      }
      if (title == null) {
        title = '(untitled)';
      }
      body = marked.Parser.parse(lex);
      if (input.absolutePath || input.absoluteURL) {
        body = this.convertToAbsoluteLinks(body, input);
      }
      if ((input.year != null) && (input.month != null) && (input.date != null)) {
        buf = "<div class=\"date\">";
        if (!input.noTitleLink) {
          buf += "<a href=\"" + input.link + "\">";
        }
        buf += "" + (this.formatDate(input.year, input.month, input.date));
        if (!input.noTitleLink) {
          buf += "</a>";
        }
        buf += "</div>\n";
        body = buf + body;
      }
      author = void 0;
      if (!input.noAuthor) {
        author = "<div class=\"author\">Posted by " + ("<a href=\"" + this.config.authorLink + "\">" + this.config.authorName + "</a>");
        if (this.config.authorEmail) {
          author += (" &lt;<a href=\"mailto:" + this.config.authorEmail + "\">") + (this.config.authorEmail + "</a>&gt;");
        }
        author += "</div>";
      }
      if (!input.noTitleLink) {
        body = body.replace(/<(h\d)([^>]*)>(.*?)<\/\1>/, "<$1$2><a href=\"" + input.link + "\">$3</a></$1>");
      }
      if (input.anchorHeading !== false) {
        headingCount = -1;
        body = body.replace(/<(h\d)([^>]*)>(.*?)<\/\1>/g, function(match, p1, p2, p3) {
          if (++headingCount > 0) {
            return ("<" + p1 + p2 + " class=\"anchor\" id=\"heading_" + headingCount + "\">") + ("<a href=\"#heading_" + headingCount + "\">" + p3 + "</a></" + p1 + ">");
          } else {
            return match;
          }
        });
      }
      body = body.replace(/<(h\d)([^>]*)>/, "<$1$2 class=\"title\">");
      body = body.replace(/(<h\d) id="[^"]*"/g, '$1');
      opts = {
        title: title,
        body: body,
        author: author,
        siteName: this.config.siteName,
        siteURL: this.config.siteURL
      };
      if (input.noTitle) {
        opts.title = void 0;
      }
      html = ejs.render(this.pageTemplate, opts);
      return callback(null, html);
    };

    BitterServer.prototype.listYears = function() {
      var year, years;
      years = fs.readdirSync(this.basedir);
      years = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = years.length; j < len; j++) {
          year = years[j];
          if (/\d{4}/.test(year)) {
            results.push(year);
          }
        }
        return results;
      })();
      years.sort(function(a, b) {
        return b - a;
      });
      return years;
    };

    BitterServer.prototype.listMonths = function(year) {
      var month, months;
      months = fs.readdirSync(this.basedir + "/" + year);
      months = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = months.length; j < len; j++) {
          month = months[j];
          if (/\d{2}/.test(month)) {
            results.push(month);
          }
        }
        return results;
      })();
      months.sort(function(a, b) {
        return b - a;
      });
      return months;
    };

    BitterServer.prototype.listEntries = function(year, month) {
      var file, files;
      files = fs.readdirSync(this.basedir + "/" + year + "/" + month);
      files = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = files.length; j < len; j++) {
          file = files[j];
          if (/\.md$/.test(file)) {
            results.push(file);
          }
        }
        return results;
      })();
      files.sort(function(a, b) {
        var cmp, intA, intB, match, subintA, subintB;
        intA = parseInt(a);
        intB = parseInt(b);
        cmp = intB - intA;
        if (cmp === 0) {
          subintA = 0;
          subintB = 0;
          if ((match = /^\d+-(\d+)-/.exec(a)) != null) {
            subintA = parseInt(match[1]);
          }
          if ((match = /^\d+-(\d+)-/.exec(b)) != null) {
            subintB = parseInt(match[1]);
          }
          cmp = subintB - subintA;
        }
        if (cmp === 0) {
          cmp = b.localeCompare(a);
        }
        return cmp;
      });
      return files;
    };

    BitterServer.prototype.createIndex = function(numRecents) {
      var body, count, date, elapsedTime, file, filepath, files, j, k, l, len, len1, len2, lex, markdown, match, month, months, part, recentFiles, ref, ref1, ref2, slug, startTime, title, year, years;
      if (numRecents == null) {
        numRecents = (ref = this.config.numRecents) != null ? ref : 15;
        if (this.config.numHomepageRecents != null) {
          numRecents = Math.max(this.config.numHomepageRecents, numRecents);
        }
      }
      this.logMessage("indexing...", {
        noNewline: true
      });
      startTime = new Date().getTime();
      count = 0;
      recentFiles = [];
      years = this.listYears();
      for (j = 0, len = years.length; j < len; j++) {
        year = years[j];
        if (count >= numRecents) {
          break;
        }
        months = this.listMonths(year);
        for (k = 0, len1 = months.length; k < len1; k++) {
          month = months[k];
          if (count >= numRecents) {
            break;
          }
          files = this.listEntries(year, month);
          for (l = 0, len2 = files.length; l < len2; l++) {
            file = files[l];
            match = /^(\d+)(-\d+)?-(.*)\.md$/.exec(file);
            if (match == null) {
              continue;
            }
            filepath = this.basedir + "/" + year + "/" + month + "/" + file;
            markdown = fs.readFileSync(filepath, {
              encoding: 'utf8'
            });
            lex = marked.Lexer.lex(markdown);
            title = (ref1 = this.findTitleFromLex(lex)) != null ? ref1 : '';
            body = marked.Parser.parse(lex);
            date = match[1];
            part = (ref2 = match[2]) != null ? ref2 : '';
            slug = match[3];
            recentFiles.push({
              time: new Date(year + "-" + month + "-" + date + " 00:00:00").getTime(),
              title: title,
              body: body,
              year: year,
              month: month,
              date: date,
              part: part,
              datepart: date + part,
              slug: slug
            });
            if (++count >= numRecents) {
              break;
            }
          }
        }
      }
      this.recentInfo = {
        recentFiles: recentFiles,
        generatedTime: new Date().getTime()
      };
      elapsedTime = new Date().getTime() - startTime;
      return this.logMessage("done (" + elapsedTime + " ms)", {
        noTime: true
      });
    };

    BitterServer.prototype.serveRecents = function(req, res) {
      var entryUrl, file, j, len, markdown, numRecents, ref, ref1, ref2;
      numRecents = (ref = (ref1 = this.config.numHomepageRecents) != null ? ref1 : this.config.numRecents) != null ? ref : 5;
      markdown = '';
      ref2 = this.recentInfo.recentFiles.slice(0, numRecents);
      for (j = 0, len = ref2.length; j < len; j++) {
        file = ref2[j];
        entryUrl = "/" + file.year + "/" + file.month + "/" + file.datepart + "/" + file.slug;
        markdown += "[" + (file.title || '(untitled)') + "](" + entryUrl + ")\n";
      }
      return this.formatPage({
        markdown: markdown,
        noTitleLink: true,
        noAuthor: true,
        noTitle: true
      }, (function(_this) {
        return function(err, html) {
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          res.set('Content-Type', 'text/html; charset=utf-8');
          return res.send(html);
        };
      })(this));
    };

    BitterServer.prototype.serveMostRecentEntry = function(req, res) {
      var file, filepath;
      file = this.recentInfo.recentFiles[0];
      if (file == null) {
        res.set('Content-Type', 'text/plain; charset=utf-8');
        res.send("This is the place where your content will appear.\n\nAdd a first entry like this:\n\nmkdir -p 2013/05\necho \"# Test\\n\\nHello World\" > 2013/05/27-test.md\ngit add .\ngit commit -m \"add test entry\"\ngit push origin master\n\nFinished? Then reload this page slowly.");
        return;
      }
      filepath = this.basedir + "/" + file.year + "/" + file.month + "/" + file.datepart + "-" + file.slug + ".md";
      return fs.readFile(filepath, {
        encoding: 'utf8'
      }, (function(_this) {
        return function(err, markdown) {
          var url;
          if (err) {
            _this.logMessage(err);
            _this.respondWithServerError(res);
            return;
          }
          url = "/" + file.year + "/" + file.month + "/" + file.datepart + "/" + file.slug;
          return _this.formatPage({
            markdown: markdown,
            link: url,
            year: file.year,
            month: file.month,
            date: file.date,
            noTitle: true,
            absolutePath: true
          }, function(err, html) {
            if (err) {
              _this.logMessage(err);
              _this.respondWithServerError(res);
              return;
            }
            res.set('Content-Type', 'text/html; charset=utf-8');
            return res.send(html);
          });
        };
      })(this));
    };

    return BitterServer;

  })(events.EventEmitter);

  module.exports = BitterServer;

  if (module.parent == null) {
    new BitterServer({
      autoStart: true
    });
  }

}).call(this);
